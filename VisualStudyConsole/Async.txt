[1] 비동기 프로그래밍
	async 키워드 + awit 키워드 사용해서 손쉽게 비동기 프로그래밍을 수행할 수 있다.

[2] 동기(Synchronous)와 비동기(asynchronous)
	var data = DownloadData(...);
	processData(data);

	1) 동기 프로그래밍
	동기 프로그래밍은 데이터를 다운로드 하거나 네트워크 바인딩 작업, CPU에서 오래 걸리는 작업 수행 시
	데이터를 받아서 사용하기까지 멈추는 현상이 발생한다.
	(다운로드, 기능 수행이 완료되어야지만 다른 작업을 수행할 수 있다는 것이다.)
		동기 프로그래밍 (스레드 차단) => 다른 작업을 수행할 수 없다.
			#1 밥을 짓는다. 밥을 다 지을 때 까지 보면서 기다린다.
			#2 국을 끓인다. 국이 완전히 끓을 때 까지 보면서 기다린다.
			#3 달걀 프라이를 넣는다. 달걀이 다 익을 때 까지 보면서 기다린다.
				작업 시간 : Sum(밥, 국, 달걀)

	2) 비동기 프로그래밍
	비동기 프로그래밍은 기능을 수행하는 동안 다른 작업을 수행할 수 있는 것이다. (동시에 다른 작업을 수행한다.)
	작업자를 여러명 사용하기 때문에 빠르게 작업을 수행할 수 있도록 한다.
	var future = DownloadAsync(...);
	future.ContinueWith(data => ProcessData(data)); // 추가적인 데이터를 처리할 수 있다.
		비동기 프로그래밍 (동기 프로그래밍 포함)
			#1 밥을 짓는다. 밥을 다 지을 때 까지 다른일을 하면서 기다린다.
			#2 국을 끓인다. 국이 완전히 끓을 때까지 다른 일을 하면서 기다린다.
			#3 댤걀 프라이를 넣는다. 달걀이 다 익을 떄까지 다른 일을 하면서 기다린다.
				작업 시간 : Sum(밥, 국, 달걀)

		비동기 프로그래밍 (동시 작업 시작)
			#1 밥을 짓기 시작하면서 국을 끓이기 시작하면서 달걀 프라이를 하기 시작합니다. (* async)
			#2 다른 일을 함현서 모든 작업이 다 끝날때 까지 기다립니다. (* await)
				작업 시간 : Max(밥, 국 ,달걀) => 가장 오래 걸리는 작업 시간 만큼 걸린다.

[3] 동기 메서드와 비동기 메서드
	1) 동기 메서드
		public Soup MakeSoup()
		{
			Console.WriteLine("국 생성 중");
			Thread.Sleep(1_000);
			return new Soup();
		}

	2) 비동기 메서드
		public async Task<Soup> MakeSoupAsync()
		{
			Console.WriteLine("국 생성 중");
			await Task.Run(()=> Task.Delay(1_000));
			return new Soup();
		}

	async await 키워드를 기본으로 사용하여 프레임워크를 활용한다.
