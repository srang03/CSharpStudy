[1] 비동기 프로그래밍
	async 키워드 + awit 키워드 사용해서 손쉽게 비동기 프로그래밍을 수행할 수 있다.

[2] 동기(Synchronous)와 비동기(asynchronous)
	var data = DownloadData(...);
	processData(data);

	1) 동기 프로그래밍
	동기 프로그래밍은 데이터를 다운로드 하거나 네트워크 바인딩 작업, CPU에서 오래 걸리는 작업 수행 시
	데이터를 받아서 사용하기까지 멈추는 현상이 발생한다.
	(다운로드, 기능 수행이 완료되어야지만 다른 작업을 수행할 수 있다는 것이다.)
		동기 프로그래밍 (스레드 차단) => 다른 작업을 수행할 수 없다.
			#1 밥을 짓는다. 밥을 다 지을 때 까지 보면서 기다린다.
			#2 국을 끓인다. 국이 완전히 끓을 때 까지 보면서 기다린다.
			#3 달걀 프라이를 넣는다. 달걀이 다 익을 때 까지 보면서 기다린다.
				작업 시간 : Sum(밥, 국, 달걀)

	2) 비동기 프로그래밍
	비동기 프로그래밍은 기능을 수행하는 동안 다른 작업을 수행할 수 있는 것이다. (동시에 다른 작업을 수행한다.)
	작업자를 여러명 사용하기 때문에 빠르게 작업을 수행할 수 있도록 한다.
	var future = DownloadAsync(...);
	future.ContinueWith(data => ProcessData(data)); // 추가적인 데이터를 처리할 수 있다.
		비동기 프로그래밍 (동기 프로그래밍 포함)
			#1 밥을 짓는다. 밥을 다 지을 때 까지 다른일을 하면서 기다린다.
			#2 국을 끓인다. 국이 완전히 끓을 때까지 다른 일을 하면서 기다린다.
			#3 댤걀 프라이를 넣는다. 달걀이 다 익을 떄까지 다른 일을 하면서 기다린다.
				작업 시간 : Sum(밥, 국, 달걀)

		비동기 프로그래밍 (동시 작업 시작)
			#1 밥을 짓기 시작하면서 국을 끓이기 시작하면서 달걀 프라이를 하기 시작합니다. (* async)
			#2 다른 일을 함현서 모든 작업이 다 끝날때 까지 기다립니다. (* await)
				작업 시간 : Max(밥, 국 ,달걀) => 가장 오래 걸리는 작업 시간 만큼 걸린다.

[3] 동기 메서드와 비동기 메서드
	1) 동기 메서드
		public Soup MakeSoup()
		{
			Console.WriteLine("국 생성 중");
			Thread.Sleep(1_000);
			return new Soup();
		}

	2) 비동기 메서드
		public async Task<Soup> MakeSoupAsync()
		{
			Console.WriteLine("국 생성 중");
			await Task.Run(()=> Task.Delay(1_000));
			return new Soup();
		}

	async await 키워드를 기본으로 사용하여 프레임워크를 활용한다.

[4] 비동기 프로그래밍 (Asynchronous Programming)
	C#은 async와 await 키워드를 제공하여 손쉽게 비동기 프로그래밍을 구현할 수 있다.
	긴 작업을 메인 스레드에서 분리하여 실행하여 결과를 반환하는 방식이다.
	여러개의 메서드를 동시에 실행시키거나 대기 시점을 변경하여 순서를 재정의할 수 있다.

[5] 차단과 비차단
	동기는 실행하는 동안 스레드가 차단되는 차단 코드를 나타내고, 비동기는 스레드가 차단되지 않는 비차단 코드를 나타낸다.
	(Blocking vs Non Blocking)
	C#은 async와 await 키워드를 사용하여 아주 쉽게 비차단 코드를 만들 수 있다.

[6] I/O 바인딩된 코드와 CPU 바인딩된 코드
	파일, 데이터베이스, 네트워크 등으로부터 데이터를 가져올 때 시간이 오래걸릴 수 있ㄷ다.
	이러한 코드를 담당할 때 I/O 바인딩된 코드라고한다.
	마찬가지로 for 문을 10000번 이상 수행하는 등의 CPU 사용량이 많은 코드를 CPU 바인딩된 코드라고 한다.
	이러한 코드들을 다룰 때 유용하다.

[7] 비동기 메서드 시그니처와 async, await 키워드
	- async : 비동기 메서드 표시
	- await: 하나의 단계로 끊고 대기하는 것

[8] 비동기 메서드 반환값
	반환값은 void, Task, Task<T> 형태를 가진다.
	- 이벤트 핸들러의 경우 void
	- 반환 값이 없는 경우 Task
	- 반환 값이 있는 경우 Task<T> 형태로 사용한다.

[9] 비동기 메서드
	비동기 메서드의 시그니처에는 async를 붙이고 메서드 본문에는 await 키워드를 사용하여 비동기 메서드르 호출할 수 있다.
	Task.Delay() 메서드는 지정된 밀리 초만큼 실행을 멈춘다.

	[ 중요 ]
	- await 메서드를 제공하는 경우 사용할 메서드 앞에 await 키워드를 추가한다.
	- await 메서드를 제공하지 않는 경우 await Task.Run() => { ... } 형태로 메서드를 실행한다.
		Task.Run(()=> 메서드());
