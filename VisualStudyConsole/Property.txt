[1] 속성 (Property)
	속성 : 필드의 값을 읽거나 쓰거나 계산하는 방법을 제공하는 클래스의 속성을 나타내는 맴버
	클래스 안에 선언된 필드의 내용을 설정(set)하거나 참조(get)할 때 사용하는 코드 블록을 속성이라고 한다.
	객체의 필드 중에서 외부에 공개하고자 할 때 사용하는 방법

	class 클래스 이름 
	{
		public [반환형] 속성이름 {get; set;}
	}

	프로퍼티는 논리적인 맴버 필드로 get 접근자를 이용하여 저장된 값이 아닌 계산되어진 값을 반환할 수 있다.
	읽기 및 쓰기에 대한 동일한 사용 방식을 제공한다.

	Java와 같은 언어에서는 속성이 없고 GetOOO(), SetOOO(입력값)의 메서드 형태로 get과 set을 구현한다.

	클래스 내에서만 사용될 상태 데이터인 필드가 외부에 노출되는 것을 막기 위해 사용한다.

[2] 속성 사용방법
	1) public 필드
		public class Car
		{
			public string name;
		}
	2) getter, setter
		public class Car
		{
			private string _name;
		}

		public string GetName()
		{
			return _name;
		}
		public void SetName(string name)
		{
			this._name = name;
		}


	3) 전체 속성
		public class Car
		{
			public string Name 
			{
				get { return Name; }
				set { this.Name = value; }
			}
		}
	4) 자동 속성
		public class Car
		{
			public string Name 
			{ get; set; }
		}

[3] 객체 초기화
	생성자를 이용하지 않고, 선언과 동시에 속성을 통해 초기화 가능
	Car car = new Car() {Name = "My Car"}; // object initilizer

	class Car 
	{
		public string Name { get; set; } = "My Car"; // Car 객체가 생성되면 Name 속성에 My Car 초기화 설정
	}

[4] 읽기 전용 속성
	set에 private를 설정해주면 읽기 전용 속성이 된다.
	class Car 
	{
		public string Name { get; private set; } = "My Car"; // Car 객체가 생성되면 Name 속성에 My Car 초기화 설정
	}

[5] nameof 연산자
	C# 6.0 버전부터 제공하는 nameof 연산자를 사용하면 속성 이름 자체를 문자열로 가져올 수 있다.
	nameof 연산자는 식별자 또는 변수 이름에 대한 리팩토링 및 이름을 변경할 때 유용하게 사용한다.
	이것으로 이름바꾸기 등 IDE 기능을 효과적으로 사용할 수 있다.

	nameof : 속성명을 문자열로 반환
	Console.WriteLine($"nameof(car.Name)");

[6] 덕 타이핑
	"새인데 오리처럼 생겼고, 오리처럼 수영하며, 오리처럼 꽥꽥 되는 나느 그 새를 오리라고 하겠다."
	처음 익명객체가 가지고 있는 속성과 동일한 형태로 새로운 익명객체를 할당시킬 수 있다.

	속성은 클래스의 필드값을 손쉽게 설정하고 읽기 편하게 관리한다. 
	이러한 속성은 개체 초기화와 익명 형식 등에서 자주 사용합니다.
	C#의 속성은 속성 개념이 없는 자바 같은 다른 언어에 비하여 코드의 간결함을 유지해주는 장점을 가지고 있다.