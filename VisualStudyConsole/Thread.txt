[1] 스레드 (Thread)
	.NET에서 Thread는 작업자 한 명을 나타낸다.
	다중 스레드 또는 다중 스레딩은 여러 작업자를 두고 동시에 여러 작업을 처리하는 것을 의미한다.
	다중 스레드를 사용하여 병렬 프로그래밍 하는 것을 목표로 수행한다.

	1명의 작업자
	멀티 스레드 : 여러명의 작업자에게 일을 맡기는 것을 의미한다.


[2] 다중 스레드 (Multi Thread)
	동시에 여러 작업을 수행하여 앱의 응답성을 높이고, 다중 코어에 처리량을 향상 시킨다.

	스레드를 편리하게 사용할 수 있는 비동기식 프로그래밍 (await, async)이 있다.
	쓰레드 >> 비동기 프로그래밍

[3] 스레드 생성
	Thread t1 = new Thread(new ThreadStart(함수명)); // ThreadStart 대리자 사용 가능
	Thread t2 = new Thread(함수명); // 함수를 파라미터로 직접 전달 가능
	Thread t3 = new Thread(()=>{ 함수 동작.. }); // 람다식 표현 가능
		- ThreadStart는 Delegate이다.
		- 스레드(Thread)는 함수를 대신 실행해주는 작업자 한명이라고 생각하면 된다.

[4] 스레드 실행
	작업 수행을 위해 인스턴스의 Start 메서드를 호출한다.
	
	async 비동기 작업 수행 (각자 작업 수행)
		t1.Start();
		t2.Start();
		t3.Start();

	await 작업 대기 (동기화)
		t1.Join();
		t2.Join();
		t3.Join();

		메인 스레드와 동기화를 수행하기 위해 Join() 메서드를 호출해야한다.
		스레드의 Start() 메서드를 호출할 때 새로운 스레드르 생성하고 실행하는 순간이 필요하기 때문에 
		메인 작업 스레드가 먼저 실행되느 종료된다.


	병렬 처리의 경우 장점은 CPU 자원을 최대한 끌어서 사용할 수 있다.
	Parallel.For() // TPL >> System.Threading.Task;

[5] 스레드 동기화 
	작업을 스레드가 담당하여 실행하고 있는데, 이때 다른 스레드가 해당 작업에 접근하지 못하도록 잠그는 기능이다.

	여러 스레드를 동시에 실행할 때 발생하는 문제는 한 스레드가 메서드를 실행하는 동안 다른 스레드도 같은 메서드를 실행하려고 할 때 오류가 발생한다.
	이를 해결 하기 위해 다른 스레드가 접근하지 못하도록 스레드를 잠글 수 있다.
	이 시점에서 스레드를 잠그는 기능을 스레드 동기화라고 한다.

	lock(this)
	{
		스레드 동기화가 필요한 코드 블록
	}

[6] 병렬 프로그래밍
	.NET은 TPL이라는 이름의 병렬 라이브러리를 제공하고 있어 쉽게 병렬 프로그래밍을 수행할 수 있다.
	C#의 병렬 프로그래밍 >> 동시성, 병렬 처리 수행

	- 동시성
		하나의 CPU가 하나의 작업을 처리하는 것을 의미한다.
		
	- 병렬성
		병렬 처리를 도와주는 API로 Parallel 클래스의 For() 또는 ForEach() 메서드를 사용하면 병렬로 컴퓨터 자원을 최대한 사용하여 빠르게 작업을 처리한다.

		using System;
		using System.Threading.Task;

		class ParallerFor
		{
			static void Main()
			{
				Parallel.For(0, 200_0000, (i) => { Console.WirteLine(i); });
			}
		}

		순서대로 실행하지 않고 다중 스레드로 나누어서 실행한다.

		C#의 이해도를 높이고 싶거나 게임 프로그래밍처럼 현업에서 프로그램을 작성하다 성능 이슈가 발생할 때 사용할 수 있는 기술입니다.