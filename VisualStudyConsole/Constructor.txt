생성자(Constructor)

	클래스 이름과 동일한 이름을 사용하는 메서드이다.
	클래스 실행 시 가장 먼저 실행되는 메서드이다.
	객체를 초기화 시켜주는 메서드 (클래스 내의 필드를 초기화 하는 작업)
	생성자는 반환값이 없고 매개변수로 인자를 받을 수 있다.

	생성자는 객체를 생성하는 것, 클래스의 형태로 조립하는 것, 자동차로 비유하면 시동 거는 것을 의미한다.

	생성자도 메서드이므로 오버로드(다중 정의)가 가능하다.
	this 키워드를 사용하여 다른 생성자를 호출할 수 도 있다.

[1] 기본 생성자 사용
	클래스를 구현하면 기본적으로 기본 생성자가 생성된다.
	클래스명과 동일한 메서드로 반환형과 매개변수가 없다.
	모든 필드를 zero, false 또는 null로 초기화 시켜준다.

	class 클래스명 {
		public 클래스명(){
			...
		}
	} 

[2] 생성자 사용하여 객체 생성
	생성자를 사용하여 객체를 초기화할 수 있다.
	생성자 메서드는 클래스의 인스턴스인 객체를 만들 때 추가로 코드를 실행시킬 수 있다.
	생성자의 역할은 클래스가 인스턴스화 될 때 인스턴스의 상태(필드)를 초기화 시켜주는 것을 의미한다.

	일반적으로 매개변수가 있는 생성자는 클래스의 내에 선언된 특정 필드 값들을 초기화하는 목적으로 사용된다.

[3] 생성자 여러개 만들기
	클래스에는 매개변수를 달리 하여 생성자를 여러개 만들 수 있다.
	이러한 기능을 생성자의 오버로드라고 한다.

	메서드와 마찬가지로 하나의 클래스에 매개변수를 다르게 하여 여러개의 생성자를 만들 수 있다.
	이러한 생성자 오버로드 기능을 사용하면 동일한 클래스에 다양한 데이터를 받아서 객체를 만들 수 있다.
	매개변수가 없는 생성자를 기본 생성자라고 하며, 매개변수가 있는 생성자는 객체를 생성할 때 매개 변수 값을 전달하면 실행된다.

[4] 정적 생성자
	생성자도 정적 생성자와 인스턴스 생성자로 구분할 수 있다.
	클래스의 정적 맴버를 호출할 때 제일 먼저 호출 되는 정적 생성자는 static 키워드로 구현하며,
	인스턴스 생성자는 public 키워드로 생성한다.


[5] 생성자 포워딩
	생성자에서 this()는 자신의 또 다른 생성자를 의미한다. 
	this() 생성자로 매개변수가 있는 생성자에서 매개 변수가 없는 생성자를 호출하거나 또 다른 생성자들을 호출할 수 있다.
	this() 생성자를 사용하여 생성자를 포워딩할 수 있다.
	이는 다른 생성자에 값을 전달하여 코드의 중복을 줄일 수 있다.

	public class Car{
		private string _name;

		public Car() : this("기본값") // 생성자 포워딩
		{
	
		}

		public Car(string name)
		{
			this._name = name;
		}
	}

[6] 생성자 초기화
	생성자의 목적 중 하나가 필드 초기화 또는 객체 상태를 초기화 해주는 것이다.
	이때 필드를 readonly 키워드로 읽기 전용 맴버를 생성하고 생성자에서 해당 값을 지정하는 방법도 사용할 수 있다.
	생성자로 넘어온 값을 할당시킨 후 변경되지 않고 사용할 수 있는 기능을 수행한다.
	상수는 선언과 동시에 값을 할당해야 하지만 readonly 필드는 선언과 동시에 초기화도 가능하고 선언 이후에 생성자에서 값을 할당(초기화) 시킬 수 있다.
	* readonly 필드는 필드의 선언과 초기화를 분리해서 사용 가능


생성자를 사용하면 클래스의 기본값을 설정하고 인스턴스화되는 개체에 제약을 둘 수 있으며, 가독성 좋은 코드를 작성할 수 있습니다.
필드처럼 private 엑세스 한정자를 가진 맴버들은 생성자로 초기화해서 사용이 가능하다.