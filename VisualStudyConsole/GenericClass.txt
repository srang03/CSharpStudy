[1] 제너릭 클래스
	제너릭 클래스는 형식 매개변수 T에 지정한 형식으로 클래스와 맴버 성질을 결정할 수 있다.
	컬렉션 클래스, 제너릭 클래스

	Cup of T 
	Cup<T>

	제너릭은 컬렉션을 다룰 때 필요한 데이터 형식만 사용하기에 성능 향상을 가져다 준다.
	매개 변수화된 형식을 만드는데 사용한다.
	제너릭에 전달하는 매개변수를 형식 매개변수 (Type Parameter)라고 한다.

	제너릭을 사용하지 않는 클래스는 Object 타입으로 값을 반환하기 때문에 메모리, 자원 낭비가 발생한다.
	제너릭의 장점은 컬렉션에 타입을 지정해주므로써 타입에 대한 안정성과 박싱과 언박싱이 필요 없어 좋은 성능을 가질 수 있다.

[2] 내장된 제너릭 리스트 클래스
	- List<T>
	- Dictionary<Key, Value>
	- HashSet<T>
	- SortedList<T>

[3] 제너릭 형식
	제너릭 형식은 하나 이상의 형식 매개변수를 설정할 수 있는 형식으로
	형식 매개 변수는 넘어오는 데이터 타입에 따른 맴버의 형식이 결정된다.

	public class List<T>

	Action<T>, Func<T, TResut>
	Action<T>는 반환값이 없는 경우 사용하는 대리자
	Func<T, TResult>는 반환값이 필요한 대지라로 마지막 파라미터는 항상 리턴 값을 의미한다.

[4] 제너릭 타입 제약 조건
	where T : struct // 반드시 값 타입(Value Type) 이어야한다.
	wehre T : class // 반드시 참조 타입(Reference Type) 이어야한다.
	where T : new() // 반드시 public 기본 생성자를 가져야한다.
	where T : <기본 클래스 이름> // 지정된 클래스로부터 상속되어야 한다.
	where T : <인터페이스 이름> // 지정된 인터페이스를 구현해야만 한다.
	where T : U // T 매개변수는 또 다른 U 형식 매개변수를 상속받아야 한다.

[5] 컬렉션 이니셜라이저 > 제네릭 리스트 초기화
	컬렉션 이니셜라이저는 컬렉션 값을 초기화하는 쉬운 방법을 제공한다.

	class Person 
	{
		public string Name {get; set;}
	}
	// 컬렉션 이니셜라이저는 List<T> 형태의 컬렉션 객체를 선언과 동시에 특정 객체 값으로 초기화할 수 있다.
	List<Person> people = new List<Person>
	{
		new Person { Name="하이1" }
		new Person { Name="하이2" }
		new Person { Name="하이3" }
	}

	foreach (var person in people)
	{
		Console.WriteLine(person);
	}


[6] 제네릭 객체를 초기화하는 방법 3가지
	1) 객체 형식의 리스트 생성 : 컬렉션 이니셜라이저로 값 초기화
	2) Add() 메서드로 리스트에 값 추가 : 객체 이니셜 라이저로 값 초기화
	3) AddRange() 메서드로 리스트에 값들 추가

[7] LINQ로 사용자 정의 제너릭 객체 데이터 다루기
	LINQ를 사용하여 특정 클래스 형태의 컬렉션 데이터를 다루는 여러가지 사용 방법

[8] 사전 제너릭 클래스
	컬렉션 클래슨느 리스트와 사전으로 구분할 수 있다.

	Dictionary<T> 클래스는 키와 값의 한 쌍으로 컬렉션을 관리하는 클래스이다.
	표 형태의 많은 데이터양을 편리하게 다룰 수 있는 기능을 제공한다.
	Dictionary<int, int> pairs = new Dictionary<int, int>();
	pairs.Add(1, 100);
	pairs.Add(2, 200);

	[리스트]					
	List<T>
	- 요소 하나에 값을 저장한다.
	- 인덱스를 사용하여 요소에 접근한다.
	- 요소 값 중복을 허용한다.
	- 반복이 빠르다.

	[사전]
	Dictionary<T>
	- 요소 하나에 키와 값을 저장한다.
	- 키값을 이용하여 요소에 접근한다.
	- 요소 중복은 허용하나 키 중복은 허용하지 않는다.
	- 특정 키에 검색이 빠르다.
	
	기타 : SortedList<TKey, TValue>, SortedDictionary<TKey, TValue>


[9] 제너릭 인터페이스
	형식 매개변수 T를 쓰는 제너릭 인터페이스를 사용
	ICollection<T> 인터페이스 : 제너릭 컬렉션 관련 크래스의 부모 역할을 하는 인터페이스 중 하나로
								제너릭 컬렉션을 조작하는 메서드 정의를 제공합니다.
								- Count
								- Add(T)
								- Clear()
								- Contains(T)
								- Remove(T)

	IEnumerable<T> 인터페이스 : IEnumerable<T> 인터페이스는 컬렉션의 데이터를 읽기 전용으로 출력할 때 사용한다.
								출력 전용이라면 IEnumberable<T> 인터페이스를 반환값으로 사용하는 것을 권장한다.
								Entitiy Framework Core 같은 ORM을 사용할 때는 IEnumerable<T> 대신에 IQueryable<T> 인터페이스를 사용하길 권장한다.

[10] 제너릭 클래스 만들기
public class Cup<T> 
	{
		...
	}

[11] 제너릭 타입의 제약 조건

[12] 제너릭 T 형식 매개변수 여러개 사용
	제너릭의 T 형식에 매개변수를 여러개 사용하는방법
	
	class Pair<T, V>
	{
		
	}
[13] 제너릭 클래스와 제너릭 메서드
	형식 매개변수 T는 클래스에 사용할 수 있으며 마찬가지로 필드, 속성, 메서드의 매개변수 형식 또는 반환 형식에 사용할 수 있다.
