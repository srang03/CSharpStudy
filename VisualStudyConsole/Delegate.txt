[1] 대리자 (Delegate)
	매개 변수 목록 및 반환 형식이 있는 메서드에 대한 참조 (포인터)를 나타내는 형식
	* Delegate 대리하다, 위임하다, 대신하다
	메서드를 대신 호출한다.

	메서드의 매개 변수에 메서드 자체(대리자)를 전달할 수 있다.
	내장된 .NET API에서 많이 사용되고 있다.

	대신해서 특정한 함수, 특정한 메서드를 호출 해주는 기능


	대리자를 만들 때는 내가 대신할 메서드의 시그니처를 보고 만들어야한다.
	동일한 반환형과 매개변수를 가지고 있는 메서드를 대신해서 호출한다.


[2] 대리자 선언
	delegate 반환형 대리자명 (자료형 파라미터);
	하나 이상의 동일한 형태의 메서드를 하나의 대리자에 담아서 한번에 호출 할 수 있다.
	
	deletgate int OP (int x, int y);

	int Sum(int x, int y)
	{
		return x + y;
	}

	int Multiply(int x, int y)
	{
		return x * y;
	}

	OP op = new OP(Sum);
	op.Invoke(2, 3);  // 첫번째 실행 방법
	op(2, 3) // 두번째 실행 방법 Invoke는 생략 가능
	
	op += Multiply; // 추가 가능 (멀티 케스팅)
	op -= Sum; // 제거 가능

	op(2, 3) // Multiply 실행


[3] 익명 함수 (무명 메서드)
	기능을 따로 함수로 선언하지 말고, 바로 이름없는 함수로 만들어서 delegate에 넣어서 사용할 수 있다.

	op = delegate(int x) { ... 기능 수행 } // 무명 메서드, 익명 함수
	op = (int x) => { ... 기능 수행 } // 람다식 구현

	op(..) 대리자 호출을 트리거라고 한다.

	내정된 대리자 형식을 통해서 직접 대리자 객체 생성 : Func<T>, Action<T>, Predicate<T> 
	사용자가 대리자를 직접 생성하지 않고 .NET에서 제공하는 제네릭 대리자를 사용해서 객체를 생성할 수 있다.
	- Action 대리자 : 반환값이 없는 메서드를 대신 호출한다.
	- Func 대리자 : 매개변수와 반환값이 있는 메서드를 대신 호출한다.
	- Predicate 대리자 : T 매개변수에 대한 bool 값을 반환하는 메서드를 대신 호출한다.

	대리자는 delegate 키워드를 통해서 대리자 형식을 만들어주고
	동일한 형태의 메서드를 대리자 객체를 생성하여 등록하고 취소하면서 사용이 가능하다.
	이때 3가지의 형태로 대리자 객체에 등록할 수 있다.
	#1 직접 동일한 형태의 메서드를 생성하여 등록한다.
	#2 delegate () {} 형태로 메서드를 등록한다.
	#3 () => {} 익명함수 형태로 메서드를 등록한다.

[4] 메서드 매개변수 사용
	메서드의 매개변수로 메서드를 전달할 수 있다.
	static void RunLambda(Action action) => action.Invoke();

	RunLambda(()=> {Console.WriteLine("Hi");});

[5] 함수 포인터
	대리자 형식은 함수 포인터라고도 한다.
	대리자를 생성할 때 사용되는 delegate 키워드는 이름 없는 메서드를 만들 때도 사용된다.
	대리자를 사용하는 것은 코드양이 증가하기 때문에 필요하지 않다고 생각할 수 도 있다.
	하지만 .NET에서 제공하는 많은 API들이 대리자의 형태로 함수를 인자로 받는 기능을 제공하기 때문에
	알아두면 좋다.
	또한 이벤트를 만드는 필수 키워드로 메서드와 이벤트 중간 정도의 헬퍼 역할을 수행한다.

대리자와 func 제네릭 대리자를 사용하면 메서드 참조를 가지는 새로운 객체를 만들고,
메서드의 매개변수에 메서드 자체를 전달할 수 있다.
앞에서 사용한 LINQ와 확장 메서드는 대리자 개념을 사용항 ㅕ함수형 프로그래밍 스타일로 코드를 작성할 수 있다.
