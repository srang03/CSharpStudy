[1] 소멸자
	소멸자 (Destructor) : 생성자와 반대 개념으로 클래스에서 인스턴스화된 객체가 메모리상에서 없어질 때 실행되는 메서드이다.
	C#에서는 .NET Framework의 GC가 객체 소멸시 메모리 해제 등의 역할을 대신해주기 때문에 소멸자를 직접 호출할 일도, 접근할 일도 없다.
	* GC : .NET Framework에서 제공하는 커다란 엔진

	소멸자는 클래스에서 객체를 생성한 후 해당 객체를 더이상 사용하지 않을 때, 메모리에서 해제되기 직전에 실행되는 메서드이다.

[2] 객체의 라이플 사이클
	생성 > 실행 > 소멸

	메모리 할당  >  객체 초기화  >  객체 사용  >  객체 소멸  >  메모리 반환
	(new 키워드)   (생성제 초기화)  (객체 맴버)   (소멸자)

	개체는 생성자로 생성이 되고, 메서드 등이 호출되는 형태로 사용한 후 최종적으로 소멸자가 호출되어 메모리에서 해제되는 생명주기를 가진다.

	C#의 가비지 수집기(GC)에서 소멸자를 호출하고 메모리 해제 관리를 하기 때문에 직접 사용할 일은 없다.

[3] Using 구문을 사용한 개체 소멸 시기 결정
	using (Resource r1 = new Resources())
	{
		r1.Method();
	}
	중괄호 블럭에서 자원을 사용하고 종료되면 개체가 소멸한다.
	객체를 만들어 놓고 바로 소멸시켜주고 싶을 경우, 객체 인스턴스를 using 구문으로 하여 사용하면 된다.

	데이터베이스 프로그래밍 부분에서 많이 사용한다.
	하나의 데이터베이스 커넥션을 맺고 쿼리문 실행 후 종료한다.

	// 이러한 코드는 IDisposable 인터페이스를 상송한 코드에서 실행되고,
		소멸자를 바로 호출하지는 않는다.
		배우지 안흔 참고용 코드

[4] 웹 프레임워크 밴치마크 순위
	웹 프레임워크 성능 순위
	가비지 컬렉터 (잘 만들어진 무료 엔진)를 사용하는 
	https://www.techempower.com/benchmarks/#section=data-r20&hw=ph&test=plaintext

[5] 값형과 참조형 메모리 자원 관리 비교
	1) 값형(Value Type)
		- Stack에 저장되므로 나중에 만들어진 변수부터 먼저 소멸된다.
		- 해당 범위를 벗어나면 자동으로 소멸됨
		- 메모리 단편화(Memory Fragementation)이 발생하지 않음
		- Heap 메모리 보다 속도가 빠르며 저장 공간은 작다.
			* 메모리 단편화 : 사용 가능한 메모리가 충분히 존재하지만 메모리 할당이 불가능한 상태 (메모리 공간 낭비, 중간에 사용하지 않는 메모리 발생)
		
		private void Method(...)
		{
			int x = 0;
			int y = 0;

			...
			// x, y는 여기 시점에서 바로 소멸된다.
		}

	2) 참조형 (Reference Type)
		- Heap 영역에 저장되어 처음 만들어진 객체부터 소멸된다.
		- 동일 객체를 여러번 참조할 수 있다.
		- 하나라도 참조하고 있으면 소멸되지 않는다.
		- 메모리 단편화의 원인이 될 수 있음
		- 가비지 커렉터에 의해서 관리된다.

		private void MyMethod()
		{
			String str = A;
			MyClass c = B;

			...

			// 참조된 str과 c 변수는 여기 시점에서 소멸
			// A와 B는 Heap 메모리 영역에 앚기 존재
		}


	닷넷 프레임워크 기반으로 콘솔을 만들면 프로그램이 종료될 때 소멸자를 호출하고, 닷넷 코어 기반으로 콘솔을 만들면 프로그램이 종료된 후 소멸자를 실행한다.

	객체를 생성(생성자)하고 사용(맴버 변수, 메서드)하고 소멸(가비지 수집기)한다.