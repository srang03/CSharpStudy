제너릭은 C# 2.0 (15년 전)으로 넘어올 때 넘버원 기술로 꼽을 수 있고, 편리함과 성능 향상을 해주는 기술

* List<T>, Cup of T, 다이아몬드 연산자

제너릭 : Cup<T>를 Cup of T로 발음하여 형식 매개 변수인 T에 따른 Cup 클래스의 객체를 생성한다.
형식 매개변수에 따라 해당 클래스의 인스턴스가 결정이 됩니다.

System.Collections.Generic 네임스페이스 안에는 제너릭 관련된 유용한 클래스들이 포함되어 있다.
=> Stack<T>, Queue<T>, LinkedList<T>, List<T>, Dictionary<Key, Value> 제너릭 관련 클래스 도구 사용 가능

기존의 Collection을 사용하면 object 데이터타입을 가지는 자료구조로 저장공간의 자원을 낭비해서 프로그램 효율이 좋지 못한다.
* 시간과 자원을 낭비하는 것
Generic을 사용해서 데이터 타입을 정한다면 동일한 데이터 크기를 가지기 때문에 기존의 Collection 보다 성능이 좋아진다.


따라서 배열을 사용하는 것 보다 리스트 오브 타입 List<T>의 형태로 컬렉션 형태의 데이터를 담아두고 사용한다.
여러개의 값을 하나의 이름으로 담아두고 사용하고자할 때 사용

[2] Enumerable
숫자를 자동으로 생성하기 위한 클래스로 실습이나 테스트 데이터를 생성하기 위해 사용된다.
특정 범위의 정수 컬렉션을 손쉽게 만들 수 있습니다.

Enumerable.Range(1, 10); >> 1부터 10까지의 데이터를 가지는 배열 생성 // 범위를 설정해서 요소를 생성한다.
Enumeralbe.Repeat(1, 10); >> 요소가 1인 데이터 10개를 가지는 배열 생성 // 값을 설정해서 요소를 생성한다.