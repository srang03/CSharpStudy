[1] OOP
	객체지향 프로그래밍을 공부한다는 것은 객체의 구성요소들을 공부하는 것

	모던 (C# 8.0 이상, 현대적인 C#)

[2] 네임스페이스
	도메인이나 회사 이름을 사용해서 또 다른 네임스페이스나 클래스들을 묶어서 관리할 수 있다.
	그룹화하여 작성하면 관리가 용이하고, 클래스 이름의 충돌을 방지할 수 있다.

[3] 클래스
	필드와 메서드를 맴버로 가지고 있는 객체의 설계도이다.
	필드는 객체의 부품으로 변수, 배열, 읽기전용 등을 가질 수 있다.
	클래스 내부에서만 사용할 수 있도록 private 접근 제한자를 통해서 캡슐화를 진행한다.
	
	* 캡슐화는 클래스 외부에서 접근할 수 없도록 내부에 숨기는 것을 의미한다.

[4] 생성자
	객체의 필드를 기본 값으로 초기화 시켜주는 기능을 수행한다.
	오버로드를 통해서 다양한 생성자를 호출할 수 있다.
	생성자 포워딩을 사용해서 코드의 중복을 제거할 수 있다.

[5] 속성 (Property)
	private 필드를 외부에서 접근할 수 있도록 하기 위해 get과 set을 통해 정의한다.

[6] 메서드 (Method)
	객체의 동작이나 기능을 정의한다.
	부모 클래스에서 정의한 메서드를 override 재정의해서 자식 클래스만의 새로운 메서드를 구현할 수 있다.

[7] 소멸자 (Destructor)
	만들어진 객체를 소멸할 때 CG가 대신하여 메모리에서 해제한다.

[8] 인덱서 (Indexer)
	클래스의 목록들을 문자열 또는 정수형으로 묶어서 관리하기 위한 기능

[9] 이터레이터 (Iterator)
	객체를 foreach문으로 반복문을 돌릴 수 있도록 만들어 하나씩 값들을 단계적으로 반환시켜주는 기능으로
	클래스를 설계할 때 이터레이터를 구현 해놓으면 개발자가 편리하게 사용할 수 있다.

[10] 대리자 (Delegate)
	동일한 메서드 시그니처를 가지는 다중 메서드를 대신 호출해주는 함수 포인터 역할을 수행한다.
	
[11] 이벤트 (Event)
	대리자는 이벤트를 만들때도 사용된다.
	하나 이상의 메서드를 이벤트가 담고 있는다.

[12] 이벤트 처리기 (Event Handler)
	이벤트가 발생했을 때 어떤 처리를 할 것인지 기능을 수행하는 메서드이다.

[13] 인터페이스 (interface)
	기능의 표준을 정의할 때 사용한다.
	인터페이스를 상속받아 사용하는 클래스들은 인터페이스가 정의해둔 맴버들을 실제로 구현해서 사용해야한다.
	인터페이스는 추상 클래스와, 기본 클래스들과 달리 다중 상속을 할 수 있다.

[14] 추상화
	부모 클래스에서 함수 시그니처인 틀을 정의해두고 기능의 실제 구현은 상속받은 자식 클래스에서 하는 것이다.
	추상 메서드를 포함하는 클래스는 추상 클래스이다.
	추상 클래스는 추상 메서드뿐만 아니라 구현된 메서드도 맴버로 가질 수 있다.

[15] 다형성 (융통성)
	동일한 인터페이스를 상속하여 구현한 클래스들을 매개변수로 담아서 사용할 수 있다.
	융통성 있게 다양한 형태의 클래스를 매개변수로 받을 수 있다.

