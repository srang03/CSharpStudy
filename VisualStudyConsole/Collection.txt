컬렉션 사용하기
array, list, dictionary

C#에서 사용할 수 있는 자료구조 컬렉션 클래스 : Array, Stack, Queue, ArrayList, Hashtable

컬렉션 (Collection) : 배열, 리스트, 사전(딕셔너리)을 사용하여 관련 개체의 그룹을 만들고 관리할 수 있다.
데이터를 보관하는 관점
1단계 => 변수 (variable) : 하나의 이름으로 하나의 데이터 형식을 갖는 것
	int number = 1_234;

2단계 => 배열 (Array) : 하나의 데이터 형식의 여러개 데이터를 그룹으로 묶어서 관리하는 것
	(명시적으로 배열의 명은 이름 뒤에 s를 붙이기도 한다.)
	string[] colors =  {"red", "green", "blue"};
	colors[0];
	
	주요 예외 발생
	=> IndexOutOfRangeException // 인덱스 배열 범위 벗어남

	Array.Sort(colors); // 오름차순 정렬 API
	Array.Reverse(colors); // 내림차순 정렬 API

	배열은 크기가 정해지면 수정할 수 없기 때문에 새로운 배열을 만들어서 구성해야한다.

3단계 => 컬렉션 (Collection)
	컬렉션은 배열의 단점을 없애준다. 데이터를 동적으로 삽입하고 삭제할 수있는 장점을 가지고 있다.
	컬렉션 클래스들은 제너릭 컬렉션에 대체가 되기 때문에 한번 정도 사용 해보는 것이 좋다.

4단계 => 구조체 (Struct) : 구조체 하나의 이름으로 서로 다른 데이터 형식을 가진 여러 데이터를 묶어서 보관
5단계 => 클래스 (Class) : 변수, 배열, 구조체, 함수를 담을 수 있는 데이터 구조
	


[ 데이터 구조 ]
변수 > 배열 > 구조체 > 클래스

[ 자료구조 ]
- 스택 : LIFO
- 큐 : FIFO
- 리스트 : LIFO + FIFO
- 트리 : 계층형 데이터를 보관해 놓은 그릇
- 그래프 : 망형 데이터

[ (Linked) 리스트와 배열의 장단점 ]
배열이 리스트보다 빠르다.
배열은 한 번 생성하면 사이즈를 변경할 수 없다.

리스트는 사용하기 편하다.
리스트는 원할 때마다 데이터 입출력이 자유롭다.


