[1] 객체
	객체 (Object)는 수많은 클래스의 인스턴스를 개체, 오브젝트 라고 한다.
	객체 (Object, 오브젝트) : 설계도인 클래스로부터 만들어진 하나의 인스턴스 (실체, 구성요소, 컴포넌트)

	C# 객체 지향 프로그래밍
	클래스, 객체, 맴버, 메서드, 속성, 생성자, 소멸자, 대리자, 이벤트

	클래스 : 청사진(Blue Print) 설계도
			데이터 보관의 관점에서는 하나의 이름으로 여러개의 데이텨 형식을 여러개 보관해 놓는 그릇에 어떠한 기능을 추가해서 묶어 관리
	객체 : 설계도로 부터 만들어진 실제 개체


[2] 클래스 기본 구조
	[엑세스 한정자] class 클래스명 {}
	public class MyClass{}


[3] 클래스 의미
	현실 세계의 자동차(개체)를 만들어내는 설계도(클래스)의 의미
	프로그램 세계의 데이터 저장 공간(필드)과 기능(메서드)을 하나의 이름 (클래스명/객체명)으로 관리한다.
	클래스는 관련있는 메서드 및 데이터 그룹으로 컨테이너(Container) 역할을 수행한다.
	클래스에서 생성된 인스턴스 객체는 하나의 완성된 단위이다.

[4] Object 객체
	클래스의 인스턴스로 실제로 만들어진 데이터

	객체 생성 순서
	#1 메모리 할당 : 힙(Heap)에 메모리를 할당하기 위해서는 new 키워드 
					* new 연산자는 참조 연산자
	#2 생성자 초기화 : 클래스의 이름과 괄호 기호를 사용한 특별한 초기화 함수 수행


[5] 객체의 생명주기 (Object LifeCycle)
	1) 객체 생성 시기 (생성)
	new 연산자를 이용하여 하나의 힙 메모리에 하나의 객체를 생성한다.
	생성자를 이용하여 메모리 상의 객체를 초기화한다.
	
	2) 객체 사용 시기 (사용)
	개체에 대한 메서드, 맴버 호출 /접근

	3) 객체 소멸 시기 (소멸)
	객체에게 할당된 메모리는 실행 환경으로 회수
	메모리 해제
	소멸 시기가 비결정적임 (GC가 결정하기 때문)
	Garbage Collector(GC)가 개체 소멸을 관장한다.

[6] 클래스의 라이프 사이클 (Class LifeCycle)
	1) 할당 (Allocation)
	Managed Heap 메모리 영역에 CLR에 의하여 객체를 위한 메모리 할당

	2) 인스턴스화 (Instantiation)
	클래스의 구조에 맞게 메모리 초기화
	클래스의 생성자가 호출된다.

	3) 해제 (Deallocation)
	가비지 수집기가 사용되지 않는 객체를 소멸시킨다.
	경우에 따라서 Disposable 인터페이스를 구현하여 Dispose 메서드를 구현할 수 있다.

[7] 정적 맴버와 인스턴스 맴버
	- 정적 맴버 : static 키워드가 붙은 맴버
		정적 필드, 정적 메서드
		접근 > class명.맴버명

	- 인스턴스 맴버
		클래스내에서 static 키워드가 붙지 않은 맴버
		클래스의 인스턴스 생성 후 맴버에 접근할 수 있다.
		접근 > 객체명.맴버명

		static 키워드가 붙은 변수를 클래스 변수라고 하고, static 키워드가 붙지 않은 변수를 인스턴스 변수라고 한다.
		static 키워드는 공유의 개념으로 클래스 내의 여러 메서드들이 해당 클래스 변수를 공유해서 사용한다.
		static 메서드는 클래스의 인스턴스를 생성하지 않고 사용할 수 있고,
		정적 메서드를 포함한 정적 맴버들은 모두 정적 맴버들만 호출할 수 있다.

[8] 객체지향 프로그래밍 
	객체지향 프로그래밍 == 목적에 맞게 필드와 메서드를 묶어서 관리한다.
	Object Oriented Programming(OOP) : 현실 세계를 모델링(추상화)하여 프로그래밍화 한 것
	OOP의 3가지 큰 개념 : 캡슐화(Encapsulation), 상속(Inheritance), 다형성(Polymorphism), 재사용성(Reuse)

[9] 클래스
	데이터(맴버변수, 필드)와 메서드(기능, 함수)를 결합해서 관리한다.
	접근 권한의 통제
		접근 한정자를 사용해서 접근 권한을 통제할 수 있다.
		public, protected, internal, private
	상속 (Inheritance)
		기존의 클래스를 상속받아 새로운 클래스를 만든다.
	인터페이스 (Interface)
		클래스의 상위 개념으로 표준 클래스를 생성한다.
		실제 구현하지 않고 인터페이스를 상속받는 클래스에서 기능을 구현하여 클래스를 완성시킨다.

	클래스 자체는 새로운 형식의 데이터 타입을 만든 것이므로 var 키워드를 통해 객체를 담아줄 수 있다.
	
=> 클래스는 설계도이고 개체는 설계도로 부터 조립되는 하나의 완성품 (하나의 단위)


[10] 클래스 배열
	사용자가 정의한 클래스도 데이텨 형식의 하나이므로 배열처럼 사용할 수 있다.
	public class MyClass {
		// body ...
	}

	MyClass[] myClass = new MyClass[3];

정적 맴버 호출은 필요할 때 클래스명으로 접근해서 바로 사용하는 개념이다.
인스턴스 맴버 호출은 클래스를 인스턴스화 한 객체에 접근하여 사용하는 개념이다.

프로그램 내에서 한 두번 호출하는 경우 정적 맴버를 사용하고, 여러번 반복해서 사용하는 경우에는 인스턴스 맴버를 사용한다.
