필드는 클래스의 부품 역할을 하는 클래스의 내부 상태 값을 저장해 놓는 그릇이다.
자동차 클래스에 선언되어 있는 변수로 자동차의 부품에 해당된다.

필드 : 클래스의 부품 역할을 하는  클래스의 내부 상태 값을 저장해 놓은 그릇

[1] 필드
	클래스 안에 선언된 변수 또는 배열 등을 필드라고 한다.
	메서드와 같은 레벨로 선언된 변수
	필드는 일반적으로 클래스의 부품 역할을 하며, 대부분 private 엑세스 한정자가 붙고 클래스 내에서 데이터를 담는 그릇 역할을 수행한다.
	이러한 필드는 객체의 상태를(state)를 보관한다.

	필드는 클래스가 가지는 속성이며 변수 또는 상수가 위치한다.

		* 상수 const 키워드 사용 (C#)

[2] 지역 변수와 전역 변수
	매서드 내에서 선언된 변수 또는 배열을 지역 변수(Local Variable)이라고 하며, 
	메서드 밖에서 선언된 변수를 전역변수 (Global Variable)이라고 한다.
	이러한 전역변수를 엑세스 한정자를 붙여서 클래스의 필드라고 한다.

	메서드가 아닌 클래스 내에 선언된 변수를 필드라고한다.
	필드는 변수와 마찬가지로 주로 소문자 또는 언더스코어로 시작한다.
	필드는 지역 변수와 달리 전역변수로 불리기도 한다.


[3] 엑세스 한정자 (Access Modifier)
	public : 접근 제한 없음
	private : 기본값으로 해당 형식에만 접근 가능
	protected : 해당 형식 또는 해당 형식을 상속받는 자식 형식에서 접근 가능
	internal : 해당 형식이 속해 있는 어셈블리(DLL 파일, 프로젝트)에서 접근 가능
	protected internal : 해당 형식을 상속받은 자식 또는 해당 어셈블리에서 접근 가능

[4] 읽기 전용(Read Only) 필드
	한 번 만들어 놓고 어떤 값을 초기화하면 그 값으로만 사용해야하는 필드
	public readonly decimal Price; 의 형태로 사용 가능

	클래스 내에 선언된 상수와 비슷하나, 선언과 동시에 초기화하는 의미와 같다.
	생성자를 통해서 초기화를 시켜줄 수 있다.
	상수와의 차이점은 선언과 초기화(생성자)를 분리해서 사용할 수 있다.

[5] 상수와 읽기 전용 필드
	1) 상수 : 컴파일시 데이터가 저장된다.
			선언과 동시에 초기화를 해야한다.
			숫자, boolean, string 값만 저장 가능
			항상 static으로 호출된다.
			
	2) 읽기 전용 필드 : 런타임시 데이터가 저장된다.
			선언과 동시 초기화 또는 생성자에 의해 초기화 가능
			모든 데이터 형식을 저장할 수 있다
			static 선언 가능하고 일반적으로 인스턴스로 사용된다.
	
[6] 캡슐화 (Information_hiding)
	개체의 데이터는 해당 객체에서만 접근이 가능하도록 private 접근 제한자 설정
	private => Field
	public => Property


[7] 여러가지 형태의 필드 선언, 초기화, 참조 구현하기
	
	private string name = "이름"; // 변수 형식 필드
	private const int m_age = 27; // 상수 형식 필드
	private readonly string _NickName = "Ian" // 읽기 전용 형식의 필드
	private string[] _Stack = {"ASP.NET", "C#"} // 배열 형식의 필드

다른 클래스에서 필드에 접근하게 하려면 public 액세스 한정자를 붙이고, 같은 클래스 내에서만 사용하려면 private 액세스 한정자를 붙인다.
필드는 private으로 캡슐화를 하고, 외부에서 필드에 접근할 수 있도록 속성을 사용하는 것이 좋다.
