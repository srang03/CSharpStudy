[1] 부분 클래스
	하나 이상의 동일한 클래스에 맴버를 나눠 관리한다
	일반적으로 하나의 클래스파일에 해당 클래스의 모든 맴버를 구현하는게 기본이다.
	C#의 코드가 길어질 경우 UI를 담당하는 코드와 실제 기능을 담당하는 코드를 파일명을 나눠서 관리하고 작성할 수 있도록 할 수 있다.
	서로 다른 파일이지만 실제 컴파일 시켰을 경우, 하나의 클래스 파일의 형태로 빌드 되도록 만들어 주는 것이다.

	partial class

	1) 부분 클래스를 사용하는 케이스
	특정한 클래스의 맴버들을 파일을 구분해서 나눠 관리하고 싶을 경우
	파일을 구분하지 않아도 하나의 파일에서 같은 클래스를 구분해서 관리하고 싶을 경우 

	2) 사용 방법
	public partial class PartialClass 
	{
		public void Say() => Console.WriteLine("Hello");
	}

	public partial class PartialClass
	{
		public void Bye() => Console.WriteLine("Bye");
	}
	
[2] 정적 클래스
	public static class .. 
	유틸리티 클래스 용도로 사용하기 위해서 만든다.
	C#에는 클래스 앞에 static 키워드를 붙는 정적 클래스를 만들 수 있다.

	* 싱글톤 : 프로그램 내에서 인스턴스 객체 하나만을 생성한 클래스를 싱글톤이라한다.
			정적 클래스는 인스턴스화 할 수 없으나, 싱글톤은 인스턴스화 하기 때문에 다르다.

[3] 필드에 public을 붙여 외부 클래스에 공개하기
	필드에 public을 붙여 외부 클래스에서 인스턴스.필드명으로 접근할 수 있다.
	클래스의 구성 요소인 필드는 무조건 private으로 선언한다. 
	필드도 public으로 해도 전혀 상관은 없지만 클래스의 부품 역할을 수행하기 위해
	캡슐화를 위한 private 선언

[4] 함수형 프로그래밍 스타일 : 메서드 체이닝 -> 확장 메서드
	객체.메서드().메서드().메서드() 처럼 메서드를 여러번 사용하면서 호출할 수 있도록 구현한다.
	메서드 체이닝을 구현하려면 반환값으로 자신의 객체를 반환한다.
	메서드 체이닝은 사용할 때 편리하지만, 구현할 때 코드가 복잡하다.
	나중에 확장 메서드를 만드는 방법을 배우는데, 확장 메서드를 사용하면 훨씬 간단하게 메서드 체이닝을 구현할 수 있다.

[5] 불변 형식
	1) Immutable : 변경이 불가능한
	프로그래밍에서 불변 형식은 객체가 만들어지고 값이 변경되지 않음을 의미한다. 
	객체르 생성하고 변경되지 않아야 프로그래밍의 부작용을 줄일 수 있다.

	* 사이드 이펙드 : 부작용
	안정적인 클래스를 구현하기 위해 읽기 전용 또는 생성자를 통해서만 변경할 수 있는 불변 타입을 구현할 수 있다.
	
	2) 최근 코드 패턴
	속성을 클래스 외부에서 접근하는 것보다 한 번 세팅되면 그 값을 유지하기 위해,
	setting 부분을 private로 잠궈두고, 생성자를 통해서 초기화 시키는 방식을 사용한다.

	필드를 public으로 사용하고 싶다면 읽기 전용 또는 상수로 만들어서 사용해야 한다.

	중간에 필드가 변경되지 못하도록 생성자에 의해서 특정한 속성 또는 필드의 값이 초기화 시켜 사용한다.

[6] 변환 연산자 (연산자 오버로드)
	public class Car
	{
		public string Name { get; private set; }
		public Car(string name) => Name = name;
		public static implicit operator Car(string name) => new Car(name)
	}
