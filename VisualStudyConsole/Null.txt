프로그래밍 언어에서 Null 널은 아무것도 없는 상태를 나타낸다.
아무 것도 없음을 의미하는 리터럴, 개체가 아무 것도 참조하지 않음을 null 참조라고 한다.

- 아무런 값이 업음
- 참조형 변수에 아무런 값을 설정하지 않음
- 알려지지 않은 값으로 아무 의미가 없거나 모르는 값 또는 값이 없음을 의미
- 변수가 아무런 값도 가리키고 있지 않음
- 변수가 이름만 만들어지고 아무런 참조를 하지 않음
- 개체가 만들어 지고 아무런 값도 참조 하지 않음
- 영어 단어로 Undefined를 의미
- 빈값(Empty)와는 다른 의미 

프로그래밍 언어에서 Null의 발생으로 오류가 많이 발생한다.
Null을 저장과 허용하지 않고, Null 자리에 프로그램의 목적에 초기화 해주는 작업이 필수이다.

C# 상위버전으로올라가면서 Null 관련 연산자가 추가되었다.

NULL은 아무 것도 없음을 의미하는 리터럴, 개체가 아무 것도 참조하지 않음을 null 참조라고 한다.

값 형식은 변수 위치 그대로 값이 저장되는 것 (스택 영역)
참조 형식은 개체의 주소값을 스택 영역에 저장하고 실제 인스턴스는 Heap 영역에 저장하는 것

int i = 0; // 값형 (Value Type)
string s = null; // 참조형 (Reference Type)

string empty = ""
empty와 null은 다르다.

참조형은 null을 담아 놓을 수 있는 그릇인데, null 리터럴은 아무 곳도 가르키고 있지 않다는 뜻이다.

[2] Null 구조체 
구조체를 사용하여 널 가능 형식 변수 만들기
Nullable<bool> bln = null;
bln.HasValue // false

[3] Nullale
Value 타입 뒤에 ?를 붙여 Nullable type을 만들 수 있다.
int? num = null;
num = 10;

[4] ?? 연산자 (널 병합 연산자 (Null Coalescing Operator))
string nullValue = null;
string message = "";

	#1 if문으로 null값 비교
	if(nullValue == null){
		message = "새로운 값";
	}
	else {
		message = nullValue;
	}

	#2 ?? 연산자로 null값 비교
	 string message = nullValue ?? "새로운 값"

	 1번 2번은 동일한 기능 수행 But 구문보다 식으로 코딩하는 습관이 중요

[5]  default 키워드 이용한 초기화
int? value = null;
int x = value ? default(int);
int y = value ? default;

[6] 널 조건부 연산자 (Null conditional)
엘비스 (?.) 연산자를 통해 null이 아니면 메서드 수행, null이면 null값 설정
?. 연산자는 엘비스의 머리 모양과 비슷하다고 하여 Elvis 연산자라고 함
double d? = 1.23;
d?.ToString();
d?.ToString("#.000"); //포멧 설정 가능

int? len;
string message;

message = null;
len = message?.Length; // null

message = "안녕"
len = message?.Length; // 2

if 조건문을 사용하지 않고 null 연산자를 사용해서 반환시켜줄 수 있다.

[7] 널 병합 연산자와 널 조건부 연산자 함께 사용하기
?? 연산자는 컬렉션이 null이 아니면 해당값 반환, null이면 뒤에 오는 속성값 반환

list?.Count ?? 0  // 리스트의 값이 null일 경우 0 아닐경우 Count 속성값 반환

