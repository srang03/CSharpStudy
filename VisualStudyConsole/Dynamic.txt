[1] 동적 형식
	dynamic : 런타임에 데이터 형식이 결정되는 모든 형식을 담을 수 있는 특수한 유형의 형식

	C#은 태생적으로 정적 형식의 언어이다. C# 4.0 버전부터는 파이썬과 자바스크립트 처럼 동적 형식도 지원한다.

	string ss = "컴파일 시점"; // 컴파일 > 문자열로 저장
	var vs = "컴파일 시점"; // 컴파일 > 문자열로 저장
	dynamic ds = "런타임 시점"; 컴파일 > 런타임 > 문자열 저장

	JS의 var 키워드는 다이나믹 타입 (유연한 형식)
	=> 기본적으로 동적 타입

	C#에서의 var 키워드는 반드시 선언과 동시에 초기화하여 그 값을 유추한 후 컴파일 시점에서 형식이 결정되는 강력한 형식이다.
	=> 기본적으로 정적 타입, dynamic 키워드로 동적 형식 선언 가능
	dynamic 관련 오류가 있을 경우 컴파일은 되지만 실행이 되지 않는다. 이는 런타임 시점에서 오류가 발생함을 의미한다.

	dynamic x; 
	x = 1_234;
	Console.WriteLine(x); // 1_234
	Console.WriteLine($"{x} : {x.GetType()}") // Int32

	x = "1_234"
	Console.WriteLine($"{x} : {x.GetType()}") // String

[2] dynamic 특징
	dynamic 객체는 인텔리센스 기능을 사용하지 못하는 단점을 가지고 있다.
	ASP.NET Core MVC에서 Controller view에서 어떤 타입이 실행되는 시점에 결정된 어떤 데이터를 넘겨주고자 할때 사용한다.

	C#은 정적인 형식을 지정하고 사용하는 것을 권장한다.
	python, js는 기본적으로 동적이 형식을 사용한다.


[3] 동적 바인딩
	런타임할 때 데이터 형식을 결정하는 것을 동적 바인딩이라고 한다.
	동적 바인딩된 객체에 없는 속성을 호출하면 컴파일 시점에는 에러가 발생하지 않지만, 런타임 시점에 에러가 발생한다.

[4] 확장 메서드와 dynamic
	확장 메서드는 정적 형식에서 제대로 호출되지만, 동적 형식에서는 호출되지 않습니다.
	

	C#에서는 dynamic 키워드를 사용하여 동적 형식을 만들 수 있다.
	하지만 C#으로만 개발할 때는 강력한 형식을 사용하는 것이 좋다.
	동적인 언어와 호환하는 프로그램을 작성하거나 웹 개발을 할 때 MVC 패턴 처럼 컨트롤러에서 뷰로
	서로 다른 꼐층으로 데이터를 전송하는 등 상황에서는 동적 형식을 사용하면 좀더 편리하게 코드를 작성할 수 있다.